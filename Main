/* ========================================
 * Bryan Wade
 * Arduino-Based Drone Flight Computer
 * 04MAY2020
 *
 * Compatible Sensors:
 *     IMU
 *       MPU6050
 *       
 *     BARO
 *       
 *     GPS
 *
 *
 *
 * ========================================*/

//Library calls
    #include <Wire.h>
    #include "math.h"

//Define constants and variables for IMU
    const int MPU_ADDR = 0x68; //I2C address of MPU6050. If AD0 pin set high, I2C Address will be 0x69
    float accel_x, accel_y, accel_z;
    float gyro_x, gyro_y, gyro_z;
    float temp;
    float accel_errorX, accel_errorY, accel_errorZ, gyro_errorX, gyro_errorY, gyro_errorZ;
    float accel_angleX, accel_angleY, gyro_angleX, gyro_angleY, gyro_angleZ;
    float roll, pitch, yaw;
    float elapsedTime, currentTime, previousTime;
    long z_calfactor;

//Define Variables for Quaternion Math    
    Quaternion q_ref;

//Define Variables for ISRs
    byte last_channel_1, last_channel_2, last_channel_3, last_channel_4;
    int rx_inputch_1, rx_inputch_2, rx_inputch_3, rx_inputch_4;
    unsigned long timer_1, timer_2, timer_3, timer_4;

void setup() {
  
  //Establish Connection and Configure MPU6050 Settings
    Wire.begin();
    Wire.beginTransmission(MPU_ADDR);
    Wire.write(0x6B); //PWR_MGMT_1 register
    Wire.write(0); //wake up the MPU6050
    Wire.endTransmission(true); 
  
  //Setup ISR pins.  Arduino ATMEGA328 pins default to inputs,  so they don't need to be explicitly stated
    PCICR |= (1 << PCIE0); // Set PCIE0 to enable PCMSK0 Scan
    PCMSK0 |= (1 << PCINT0); // Set PCINT0 (digital input 8) to trigger interrupt on state change
    PCMSK0 |= (1 << PCINT1); // Set PCINT1 (digital input 9) to trigger interrupt on state change
    PCMSK0 |= (1 << PCINT2); // Set PCINT2 (digital input 10) to trigger interrupt on state change
    PCMSK0 |= (1 << PCINT3); // Set PCINT3 (digital input 11) to trigger interrupt on state change
  
    Serial.begin(9600);

  //Get initial IMU offset values
    initial_imu_cal();
}

void loop() {
  imu_read();
  
  //while(!imu_read()); //while imu_read is false
  //read_rc_values();
  //fc_process();
}

void initial_imu_cal(){
  
  int i = 0, calset = 200; //change calset to modify calibration dataset
  while (i < calset) {
    raw_imu_data();
    accel_errorX = accel_errorX + ((atan((accel_y) / sqrt(pow((accel_x), 2) + pow((accel_z), 2))) * 180 / PI));
    accel_errorY = accel_errorY + ((atan(-1 * (accel_x) / sqrt(pow((accel_y), 2) + pow((accel_z), 2))) * 180 / PI));
    accel_errorZ = accel_errorZ + accel_z;

    gyro_errorX = gyro_errorX + gyro_x;
    gyro_errorY = gyro_errorY + gyro_y;
    gyro_errorZ = gyro_errorZ + gyro_z;
    i++;
  }

  accel_errorX = accel_errorX/calset;
  accel_errorY = accel_errorY/calset;
  accel_errorZ = accel_errorZ/calset;

  gyro_errorX = gyro_errorX/calset;
  gyro_errorY = gyro_errorY/calset;
  gyro_errorZ = gyro_errorZ/calset;

  calibrate_imu_data();
  q_ref = ToQuaternion(yaw, pitch, roll);

  /*
  Serial.print("Q_REF: "); Serial.print(q_ref.w); Serial.print(" | ");
  Serial.print(q_ref.x); Serial.print(" | ");
  Serial.print(q_ref.y); Serial.print(" | ");
  Serial.print(q_ref.z); 
  Serial.println();
  
  Serial.print("Calibration Complete.");
  Serial.println();
  Serial.print("AccelX: "); Serial.print(accel_errorX);
  Serial.print(" | AccelY: "); Serial.print(accel_errorY);
  Serial.print(" | AccelZ: "); Serial.print(accel_errorZ);
  Serial.print(" | GyroX: "); Serial.print(gyro_errorX);
  Serial.print(" | GyroY: "); Serial.print(gyro_errorY);
  Serial.print(" | GyroZ: "); Serial.print(gyro_errorZ);
  Serial.println();
  */
}

void imu_read() {
  raw_imu_data();
  calibrate_imu_data();
  //print_to_PDE();
  //print_imu_data();
  print_Quaternions();
}

void raw_imu_data(){
  //Get data from sensors
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); //ACCEL_XOUT_H
  Wire.requestFrom(MPU_ADDR, 14, true);
  Wire.endTransmission(false); //Keeps connection active
  Wire.requestFrom(MPU_ADDR, 14, true); //request 14 registers

  //Read accelerometer registers and calibrate to +/-2G
  accel_x = (Wire.read()<<8 | Wire.read()) / 16384.00; //Read registers 0x3B and 0x3C (Accel x High and Low)
  accel_y = (Wire.read()<<8 | Wire.read()) / 16384.00; //Read registers 0x3D and 0x3E (Accel y High and Low)
  accel_z = (Wire.read()<<8 | Wire.read()) / 16384.00; //Read registers 0x3F and 0x40 (Accel z High and Low)
  
  temp = Wire.read()<<8 | Wire.read(); //Read registers 0x41 and 0x42 (Temp High and Low)

  //Read Gyros and Calculate Degrees/second using the onboard running clock, millis()
  previousTime = currentTime; 
  currentTime = millis();  
  elapsedTime = (currentTime - previousTime) / 1000; //Convert to seconds
  
  gyro_x = (Wire.read()<<8 | Wire.read()) / 131.0; //Read registers 0x43 and 0x44 (Gyro x High and Low)
  gyro_y = (Wire.read()<<8 | Wire.read()) / 131.0; //Read registers 0x45 and 0x46 (Gyro y High and Low)
  gyro_z = (Wire.read()<<8 | Wire.read()) / 131.0; //Read registers 0x47 and 0x48 (Gyro z High and Low)  
} 

void calibrate_imu_data(){
  
  accel_angleX = (atan(accel_y/sqrt(pow(accel_x, 2)+pow(accel_z, 2)))*(180/PI)) - accel_errorX;
  accel_angleY = (atan(-1*accel_x/sqrt(pow(accel_y, 2)+pow(accel_z,2)))*(180/PI)) - accel_errorY;

  //Factor in gyro error from initial calibration
  gyro_x = gyro_x - gyro_errorX; 
  gyro_y = gyro_y - gyro_errorY; 
  gyro_z = gyro_z - gyro_errorZ; 
  
  //convert to degrees per second
  gyro_angleX = gyro_angleX + gyro_x * elapsedTime;
  gyro_angleY = gyro_angleY + gyro_y * elapsedTime;
  yaw = yaw + gyro_z * elapsedTime;

  //Add complimentary filter
  roll = 0.95 * gyro_angleX + 0.05 * accel_angleX;
  pitch = 0.95 * gyro_angleY + 0.05 * accel_angleY;
}

ISR(PCINT0_vect){
    //Channel 1 ------------------------------------
    if(last_channel_1 == 0 && PINB & B00000001 ){           //Input 8 changed from 0 to 1
        last_channel_1 = 1;                                 //Remember the current state
        timer_1 = micros();                                 //Set timer to mircos
    }
    else if(last_channel_1 == 1 && !(PINB & B00000001)){    //Input 8 changed from 1 to 0
        last_channel_1 = 0;                                 //Remember current input state
        rx_inputch_1 = micros() - timer_1;                  //Channel 1 is micros() - timer_1
    }
    //Channel 2 ------------------------------------
    if(last_channel_2 == 0 && PINB & B00000010){
        last_channel_2 = 1;
        timer_2 = micros();
    }
    else if(last_channel_2 == 1 && !(PINB & B00000010)){
        last_channel_2 = 0;
        rx_inputch_2 = micros() - timer_2;
    }
    //Channel 3 ------------------------------------
    if(last_channel_3 == 0 && PINB & B00000100 ){
        last_channel_3 = 1;
        timer_3 = micros();
    }
    else if(last_channel_3 == 1 && !(PINB & B00000100)){
        last_channel_3 = 0;
        rx_inputch_3 = micros() - timer_3;
    }
    //Channel 4 ------------------------------------
    if(last_channel_4 == 0 && PINB & B00001000 ){
        last_channel_4 = 1;
        timer_4 = micros();
    }
    else if(last_channel_4 == 1 && !(PINB & B00001000)){
        last_channel_4 = 0;
        rx_inputch_4 = micros() - timer_4;
    }
}

void print_to_PDE(){
  //Only call this function if using Processing Development Environment
  Serial.print(roll);
  Serial.print("/");
  Serial.print(pitch);
  Serial.print("/");
  Serial.println(yaw);
}

void print_imu_data(){
  //print out data
  Serial.print("aX = "); Serial.print(accel_angleX);
  Serial.print(" | aY = "); Serial.print(accel_angleY);
  Serial.print(" | aZ = "); Serial.print(accel_z);
  Serial.print(" | tmp = "); Serial.print((temp/340.00+36.53)*9/5+32);Serial.print("F");
  Serial.print(" | gX = "); Serial.print(gyro_x);
  Serial.print(" | gY = "); Serial.print(gyro_y);
  Serial.print(" | gZ = "); Serial.print(gyro_z);
  Serial.print(" | Roll = "); Serial.print(roll);
  Serial.print(" | Pitch = "); Serial.print(pitch);
  Serial.print(" | Yaw = "); Serial.print(yaw);
  Serial.println();
}

void print_Quaternions(){
  Quaternion quat; 
  Quaternion q_e;
  quat = ToQuaternion(yaw, pitch, roll);
  q_e = K_Product(quat, q_ref);
  Serial.print(quat.w); Serial.print(" | ");
  Serial.print(quat.x); Serial.print(" | ");
  Serial.print(quat.y); Serial.print(" | ");
  Serial.print(quat.z); Serial.print(" Q_ERROR: ");
  Serial.print(q_e.w); Serial.print(" | ");
  Serial.print(q_e.x); Serial.print(" | ");
  Serial.print(q_e.y); Serial.print(" | ");
  Serial.print(q_e.z);
  Serial.println();
}

void print_signals(){
    Serial.print("Roll:");
    if(rx_inputch_1 - 1400 < 0)Serial.print("<<<");
    else if(rx_inputch_1 - 1520 > 0)Serial.print(">>>");
    else Serial.print("-+-");
    Serial.print(rx_inputch_1);
    
    Serial.print("Pitch:");
    if(rx_inputch_2 - 1400 < 0)Serial.print("<<<");
    else if(rx_inputch_2 - 1520 > 0)Serial.print(">>>");
    else Serial.print("-+-");
    Serial.print(rx_inputch_2);
    
    Serial.print("Yaw:");
    if(rx_inputch_3 - 1400 < 0)Serial.print("<<<");
    else if(rx_inputch_3 - 1520 > 0)Serial.print(">>>");
    else Serial.print("-+-");
    Serial.print(rx_inputch_3);
    
    Serial.print("PCL:");
    if(rx_inputch_4 - 1400 < 0)Serial.print("<<<");
    else if(rx_inputch_4 - 1520 > 0)Serial.print(">>>");
    else Serial.print("-+-");
    Serial.print(rx_inputch_4);
}



