/* ========================================
 * Bryan Wade
 * Arduino-Based Drone Flight Computer
 * 04MAY2020
 *
 * Compatible Sensors:
 *     IMU
 *       MPU6050
 *       
 *     BARO
 *       
 *     GPS
 *
 *
 *
 * ========================================*/

//MAIN ROUTINE

//Library calls
#include Wire.h

//Define Constants: i.e. I2C address
MPU_ADDR = 0x68; //I2C address of MPU6050. If AD0 pin set high, I2C Address will be 0x69
int16_t accel_x, accel_y, accel_z;
int16_t gyro_x, gyro_y, gyro_z;
int16_t temp;

/*=========================================
 * Note: 
 * int16_t specifies a 16 bit integer, whereas 
 * int can be a 16 or 32 bit integer (on the Arduino Due)
 * int_fast16_t can be used in critical sections of code that require a minimum of 16 bits
 * ========================================*/

char tmp_str[7]; //temporary variable used in convert function

char* convert_int16_to_str(int16_t i){
    sprintf(tmp_str, "%6d", i);
    return tmp_str;
}

/* =============================================================================
 * The sprintf function will write the formatting string and the variables into the "data" character array.
 * You provide a formatting string template, that contains placeholders for variables that you plan to insert.
 * These placeholders have a percentage sign (%) prefix.  Eg.  %s, %d, %f etc.
 * The number of placeholders must match the number of variables.
 * The variables are inserted at the placeholder position, and formatted based on the type of placeholder used.
 * %d = signed integer               %f = floating point number  
 * %s = string                     %.1f = float to 1 decimal place
 * %c = character                  %.3f = float to 3 decimal places
 * %e = scientific notation          %g = shortest representation of %e or %f                
 * %u = unsigned integer             %o = unsigned octal
 * %x = unsigned hex (lowercase)     %X = unsigned hex (uppercase)
 * %hd = short int                  %ld = long int
 * %lld = long long int
 * =============================================================================  */

void setup() {
   
  //Establish Connection and Configure MPU6050 Settings
  //Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B); //PWR_MGMT_1 register
  Wire.write(0); //wake up the MPU6050
  Wire.endTransmission(true); 
  /*Note: At powerup, MPU clock source defaults to internal ocsillator.
  Highly recommended the device be configured to use one of the gyroscopes
  (or external clock source) as the clock reference for improved stability.
  Use CLKSEL to change clock source.
  */
  
}

void loop() {
  while(!imu_read()); //while imu_read is false
  read_rc_values();
  fc_process();
}

void imu_read() {
  //Get data from sensors
  Wire.write(0x3B); //ACCEL_XOUT_H
  Wire.requestFrom(MPU_ADDR, 7*2, true);
  Wire.endTransmission(false); //Keeps connection active
  Wire.requestFrom(MPU_ADDR, 7*2, true); //request 14 registers
  //"Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same vairable
  
  accelerometer_x = Wire.read()<<8 | Wire.read(); //Read registers 0x3B and 0x3C (Accel x High and Low)
  accelerometer_y = Wire.read()<<8 | Wire.read(); //Read registers 0x3D and 0x3E (Accel y High and Low)
  accelerometer_z = Wire.read()<<8 | Wire.read(); //Read registers 0x3F and 0x40 (Accel z High and Low)
  
  temperature = Wire.read()<<8 | Wire.read(); //Read registers 0x41 and 0x42 (Temp High and Low)
  
  gyro_x = Wire.read()<<8 | Wire.read(); //Read registers 0x43 and 0x44 (Gyro x High and Low)
  gyro_y = Wire.read()<<8 | Wire.read(); //Read registers 0x45 and 0x46 (Gyro y High and Low)
  gyro_z = Wire.read()<<8 | Wire.read(); //Read registers 0x47 and 0x48 (Gyro z High and Low)  
  
  /* ------------
  //print out data
  Serial.print("aX = "); Serial.print(convert_int16_to_str(accelerometer_x));
  Serial.print(" | aY = "); Serial.print(convert_int16_to_str(accelerometer_y));
  Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(accelerometer_z));
  // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
  Serial.print(" | tmp = "); Serial.print(temperature/340.00+36.53);
  Serial.print(" | gX = "); Serial.print(convert_int16_to_str(gyro_x));
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));
  Serial.println();
  
  // delay
  delay(1000);
  ---------------*/
  
}
